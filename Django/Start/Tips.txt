MVT – это аббревиатура, которая расшифровывается, как model-view-template. 

django-admin – это инструмент, при помощи которого можно управлять Django-проектами, 
в том числе создавать их. 

startproject – команда, которая создает Django-проект. 
То есть структурированные по папкам питоновские файлы – основа любого Django-проекта. 

todolist – название проекта

Точка в конце команды нужна для того чтобы проект создался в той папке, где прописали команду. 

В нашей папке todolist:

1. __init__.py - пустой файл, который говорит компьютеру, что папка, 
в котором данный файл находится является пакетом питона
(пакет - питоновские файлы). Пакет нужен для того чтобы мы могли в наше коде импортировать функции из дургих файлов. 
2. settings.py - это модуль, (питоновские файлы будут называться модулями), в котором будут размещаться все настройки проекта. 
3. urls.py - модуль, который отвечает за маршрутизацию запросов.
4. asgi, wsgi - модули для реального размещения нашего сайта в открытом доступе. 
5. manage.py - файл с помощью которого можно управлять Django-проектом.

Запуск команд:  python manage.py <название_команды>)  - шаблон.

To run server - python manage.py runserver 
runserver - runserver – эта команда запускает сервер Django, 
который будет постоянно ждать подключения со стороны клиента (можно провести аналогию с командной mainloop из библиотеки tkinter).

After running the server, open: 127.0.0.1:8000 or localhost:8000 - open the website.

Django project consist from apps(приложения). Приложение - папка с модулями(пакет), которая отвечает за конкретную/определенную часть нашего сайта.

Small website- would require one app. Going to use startapp module. Used: python manage.py startapp core command.

1. admin.py - module to manage administration of website
2. models.py - MVT - Modules
3. test.py - to test. 

Когда создается приложение - нужно поделиться с Django. Changing setting.py - core.apps.CoreConfig.

Грубо говоря, наш сайт будет работать по следующей схеме:

• Получение запроса от клиента (чтобы сделать запрос, нужно просто перейти по определенному адресу в браузере).

• Обработка этого запроса. Обработки, как таковой, у нас пока не будет.

• Возврат ответа клиенту (то есть браузеру) в виде HTML-документа.

Маршрутизация это просто привязка обработчика к определенному адресу. Нужна для обработки запросов. 
Маршрут привязывает обработчик к интернет-адресу, при запросе на который этот обработчик должен вызываться.

Второй параметр как мы сказали - обработчик. обработчик TemplateView - выдает страницу после запроса.

As we made path - "", empty string - when we just open - goes directly to index.html 
in C:\Users\ismat\Desktop\Coding\Showcase\Django\Start\todolist\urls.py - if you mean some website - it will go to one you say,
passing one more argument in path("website/name_of_another_web" , url to that another web)

Template - simple text documents, specifically HTML documents. 